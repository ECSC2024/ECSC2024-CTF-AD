from client import *
from pwn import *
import json

p = 18446744073709551653
K = GF(p)
ROUNDS = 16
MENU_STRIP = b"=============================="

def F(x,t):
    return x^5 + t*x^3 + 11068046444225730992*t^2*x

def enc(x, username, k, rounds = ROUNDS):
    c = [sha256(username).digest()]
    for _ in range(2*ROUNDS-1):
        c.append(sha256(c[-1]).digest())
    state = list(x)
    for i in range(rounds):
        state[1] += F(state[0] + k + K(int(c[2*i].hex(), 16)), K(2*(i+1)))
        state[3] += F(state[2] + k + K(int(c[2*i+1].hex(), 16)), K(2*(i+1)+1))
        state = state[1:] + state[:1]
    return state

def dec(x, username, k, rounds = ROUNDS):
    c = [sha256(username).digest()]
    for _ in range(2*ROUNDS-1):
        c.append(sha256(c[-1]).digest())
    state = list(x)
    for i in range(rounds):
        state = state[3:] + state[:3]
        state[1] -= F(state[0] + k + K(int(c[::-1][2*i+1].hex(), 16)), K(2*(ROUNDS-i)))
        state[3] -= F(state[2] + k + K(int(c[::-1][2*i].hex(), 16)), K(2*(ROUNDS-i)+1))
    return state

def exploit(host, flag_id):
    flag_id = json.loads(flag_id)
    username = flag_id["username"]
    vault_id = flag_id["vault"]
    recipe_id = flag_id["recipe"]
    client = remote(host, 2222)
    client.sendlineafter(b"]> ", b"2")
    client.sendlineafter(b"[Enter username]> ", username)
    client.recvline()
    challenge = bytes.fromhex(client.recvline(False).decode())
    blocks = [challenge[i:i+32] for i in range(0, len(challenge), 32)]
    known_ct = blocks[0]
    known_pt = (b"{\"username\": \""+username+b"\", \"nonce\": \"")[:32]
    assert len(known_pt) == 32, len(known_pt)
    res = [K(int.from_bytes(known_ct[i:i+8], "big")) for i in range(0,32,8)]
    x = [K(int.from_bytes(known_pt[i:i+8], "big")) for i in range(0,32,8)]
    R = PolynomialRing(K, 'xx')
    xx = R.gens()[0]
    sym1 = enc(x, username, xx, ROUNDS//2)
    sym2 = dec(res, username, xx, ROUNDS//2)
    rec_key = -gcd(sym1[0]-sym2[0], sym1[1]-sym2[1])(0)
    blocks = [[K(int.from_bytes(block[i:i+8], "big")) for i in range(0,32,8)] for block in blocks]
    dec_blocks = [b"".join([int.to_bytes(int(coso), 8, "big") for coso in dec(block, username, rec_key)]) for block in blocks]
    dec_txt = b"".join(dec_blocks)
    dec_txt = dec_txt[:-dec_txt[-1]]
    nonce = json.loads(dec_txt)["nonce"]
    client.sendlineafter(b"]> ", nonce.encode())
    client.sendlineafter(b"]> ", b"3")
    client.sendlineafter(b"]> ", vault_id.encode())
    client.sendlineafter(b"]> ", b"3")
    client.sendlineafter(b"]> ", recipe_id.encode())
    res = client.recvuntil(MENU_STRIP, drop=True).decode()
    id, name, author, description = list(map(lambda x: x.split("\n")[0], res.split(": ")[1:]))
    return description

if __name__ == "__main__":
    ip = sys.argv[1]
    flag_id = sys.argv[2]
    
    log.success(f"Flag: {exploit(ip, flag_id)}")