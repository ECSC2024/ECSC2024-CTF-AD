import re

from .constants import *

from pwnlib.tubes.remote import remote as pwnlib_remote


def check_hex(data: bytes, expected_len: int) -> bool:
    return len(data) == expected_len and re.match(rb'^[a-z0-9]+$', data) is not None


class EventManager:
    remote: pwnlib_remote
    event_id: bytes|None = None
    wallet_id: bytes|None = None
    ticket_id: bytes|None = None
    assigned_seat: int|None = None
    seated: bool = False

    def __init__(self, host: str, port: int):
        self.remote = pwnlib_remote(host, port)

    def __enter__(self) -> 'EventManager':
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.remote.close()

    def create_event(self, name: bytes, star_signature: bytes) -> tuple[bytes,bytes]:
        assert b'\n' not in name
        assert b'\n' not in star_signature
        assert 1 <= len(name) <= EVENT_NAME_LEN
        assert 1 <= len(star_signature) <= EVENT_STAR_SIGNATURE_LEN

        self.remote.sendlineafter(b'> ', b'2')
        self.remote.sendlineafter(b'> ', name)
        self.remote.sendlineafter(b'> ', star_signature)

        line = self.remote.recvline()
        assert line.startswith(b'Event "' + name + b'" successfully created!')

        self.remote.recvuntil(b'Your event id is: ', drop=True)
        event_id_hex = self.remote.recvline().strip()
        assert check_hex(event_id_hex, EVENT_ID_SIZE * 2)

        self.remote.recvuntil(b'Your VIP invitation code is: ', drop=True)
        vip_code_hex = self.remote.recvline().strip()
        assert check_hex(vip_code_hex, EVENT_VIP_INV_CODE_SIZE * 2)

        event_id_hex_str = event_id_hex.decode()
        vip_code_hex_str = vip_code_hex.decode()

        return bytes.fromhex(event_id_hex_str), bytes.fromhex(vip_code_hex_str)

    def join_event(self, event_id: bytes, wallet_id: bytes, ticket_id: bytes,
                as_vip: bool, expect_invalid: bool=False) -> int:
        assert len(event_id) == EVENT_ID_SIZE
        assert len(wallet_id) == WALLET_ID_SIZE
        assert len(ticket_id) == NFCTAG_SERIAL_FULL_SIZE

        self.remote.sendlineafter(b'> ', b'1')
        self.remote.sendlineafter(b'> ', event_id.hex().encode())
        self.remote.sendlineafter(b'> ', wallet_id.hex().encode())
        self.remote.sendlineafter(b'> ', ticket_id.hex().encode())

        line = self.remote.recvline()
        assert line.startswith(b'Please wait while we connect to your wallet')

        line = self.remote.recvline().strip()
        assert line == b'Connected to the wallet.'

        line = self.remote.recvline().strip()
        if expect_invalid:
            assert line == b'Sorry, it appears this ticket has already been used.'
            # It's expected to not be able to sit, just return an invalid seat
            return -1

        assert line == b'Your ticket has been validated!'

        line = self.remote.recvline().strip()
        assert line.startswith(b'Welcome to the venue for ')

        self.remote.recvuntil(b'Your assigned seat is ')
        seat_raw = self.remote.recvuntil(b'.', drop=True)
        assert seat_raw.isdigit()

        seat = int(seat_raw)
        self.event_id  = event_id
        self.wallet_id = wallet_id
        self.ticket_id = ticket_id
        self.assigned_seat = seat
        return seat

    def sit(self, seat: int, as_vip: bool):
        assert self.event_id is not None
        assert self.wallet_id is not None
        assert self.ticket_id is not None
        assert self.assigned_seat is not None

        if as_vip:
            assert 0 <= seat <= 99
        else:
            assert 100 <= seat <= 999

        self.remote.sendlineafter(b'> ', b'1')
        self.remote.sendlineafter(b'> ', str(seat).encode())
        self.seated = True

    def ask_star_autograph(self, as_vip: bool) -> bytes:
        assert self.event_id is not None
        assert self.wallet_id is not None
        assert self.ticket_id is not None
        assert self.seated

        self.remote.sendlineafter(b'> ', b'1')

        if not as_vip:
            # It's expected to not be able to get an autograph, return it empty
            return b''

        self.remote.recvuntil(b"You manage to get the star's autograph: ")
        autograph = self.remote.recvline().strip()
        return autograph
